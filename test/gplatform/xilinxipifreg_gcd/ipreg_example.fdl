ipblock arm {
  iptype "armsystem";
  ipparm "exec = ipreg_drive";
}

// interface for 2 write, 2 read chip-enable channels
ipblock regipif(out Bus2IP_Data    : ns(32); 
                out Bus2IP_BE      : ns( 4);  
                out Bus2IP_RdCE    : ns( 2); 
                out Bus2IP_WrCE    : ns( 2); 
                in  IP2Bus_Data    : ns(32);
                in  IP2Bus_RdAck   : ns( 1);
                in  IP2Bus_WrAck   : ns( 1);
                in  IP2Bus_Error   : ns( 1)) {
   iptype "xilinx_ipif_reg";
   ipparm "core=arm";
   ipparm "regid=0x80000000"; // index for regs
   ipparm "opid =0x80000004"; // operation id
   ipparm "data =0x8000000C"; // data r/w channel
}

// Euclid
dp euclid(in  m_in, n_in : tc(32);
          out ready      : ns( 1);
          out gcd        : tc(32)) {
  reg m, n               : ns(32);
  reg done               : ns( 1);
  reg factor             : ns(5); 

  always      { done  = ((m == 0) | (n == 0)); 
                ready = ((m == 0) | (n == 0)); 
                gcd   = ((m > n) ? m : n) << factor; }
  sfg init    { m = m_in; 
                n = n_in; 
                factor = 0; 
              }
  sfg shiftm  { m = m >> 1; }
  sfg shiftn  { n = n >> 1; }
  sfg reduce  { m = (m >= n) ? m - n : m;  
                n = (n >  m) ? n - m : n; }
  sfg shiftf  { factor = factor + 1; } 
}

fsm euclid_ctl(euclid) {
  initial s0;
  state s1; 
  @s0 (init) -> s1;
  @s1 if (done)               then (init)     -> s1;
      else if ( m[0] &  n[0]) then (reduce)   -> s1;
      else if ( m[0] & ~n[0]) then (shiftn)   -> s1;
      else if (~m[0] &  n[0]) then (shiftm)   -> s1;
                              else (shiftn, shiftm, 
                                    shiftf)   -> s1;
} 

$option "generic user_logic C_SLV_DWIDTH integer 32"
$option "generic user_logic C_NUM_REG integer 2"

dp user_logic(in  Bus2IP_Data    : ns(32); 
              in  Bus2IP_BE      : ns( 4);  
              in  Bus2IP_RdCE    : ns( 2); 
              in  Bus2IP_WrCE    : ns( 2); 
              out IP2Bus_Data    : ns(32);
              out IP2Bus_RdAck   : ns( 1);
              out IP2Bus_WrAck   : ns( 1);
              out IP2Bus_Error   : ns( 1)) {

   reg d1, d2    : tc(32);
   reg o1        : tc(32);
   sig m, n, gcd : tc(32);
   sig ready     : ns(1);
   use euclid(m, n, ready, gcd);

   reg ip2bus_d    : ns(32);
   reg ip2bus_wr_a : ns(1);
   reg ip2bus_rd_a : ns(1);

   always {

     m  = d1;
     n  = d2;
     o1 = ready ? gcd : 
          Bus2IP_WrCE[0] ? 0 :
          Bus2IP_WrCE[1] ? 0 : o1;

     d1 = Bus2IP_WrCE[0] ? Bus2IP_Data : d1;
     d2 = Bus2IP_WrCE[1] ? Bus2IP_Data : d2;

     ip2bus_d    = Bus2IP_RdCE[0] ? o1 : 0;
     IP2Bus_Data = ip2bus_d;

     ip2bus_wr_a = Bus2IP_WrCE[0] | 
		   Bus2IP_WrCE[1];
     ip2bus_rd_a = Bus2IP_RdCE[0] | 
		   Bus2IP_RdCE[1];
     IP2Bus_WrAck = ip2bus_wr_a;
     IP2Bus_RdAck = ip2bus_rd_a;

     IP2Bus_Error = 0;
   }
}

dp top {
  sig Bus2IP_Data    : ns(32);
  sig Bus2IP_BE      : ns( 4); 
  sig Bus2IP_RdCE    : ns( 2); 
  sig Bus2IP_WrCE    : ns( 2); 
  sig IP2Bus_Data    : ns(32);
  sig IP2Bus_RdAck   : ns( 1); 
  sig IP2Bus_WrAck   : ns( 1); 
  sig IP2Bus_Error   : ns( 1); 

  use arm;

  use regipif(Bus2IP_Data    ,
	      Bus2IP_BE      ,
	      Bus2IP_RdCE    ,
	      Bus2IP_WrCE    ,
	      IP2Bus_Data    ,
	      IP2Bus_RdAck   ,
	      IP2Bus_WrAck   ,
	      IP2Bus_Error   );

  use user_logic(Bus2IP_Data ,
	      Bus2IP_BE      ,
	      Bus2IP_RdCE    ,
	      Bus2IP_WrCE    ,
	      IP2Bus_Data    ,
	      IP2Bus_RdAck   ,
	      IP2Bus_WrAck   ,
	      IP2Bus_Error   );
}

system S {
  top;
}
