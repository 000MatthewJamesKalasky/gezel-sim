ipblock arm {
  iptype "armsystem";
  ipparm "exec = fifodrive";
}

$option "generic user_logic C_DWIDTH integer 32"
$option "generic user_logic C_NUM_CE integer 2"
$option "generic user_logic C_RDFIFO_DWIDTH integer 32"
$option "generic user_logic C_WRFIFO_DWIDTH integer 32"

// interface for 2 write, 2 read chip-enable channels
ipblock reg_ipif(out Bus2IP_Data    : ns(32); 
                 out Bus2IP_BE      : ns(4);  
                 out Bus2IP_RdCE    : ns(2); 
                 out Bus2IP_WrCE    : ns(2); 
                 in  IP2Bus_Data    : ns(32);
                 in  IP2Bus_RdAck     : ns(1);
                 in  IP2Bus_WrAck     : ns(1);
                 in  IP2Bus_Error   : ns(1)) {
   iptype "xilinx_ipif_reg";
   ipparm "core=arm";
   ipparm "regid= 0x80000000"; // index for regs (0, 1, 2, ..)
   ipparm "opid = 0x80000004"; // operation id  2 = read, 1 = write
   ipparm "data = 0x80000008"; // data r/w channel
}

ipblock rfifo_ipif (in   IP2RFIFO_WrReq      : ns(1);
                    in   IP2RFIFO_Data       : ns(32);
                    out  RFIFO2IP_WrAck      : ns(1);
                    out  RFIFO2IP_AlmostFull : ns(1);
                    out  RFIFO2IP_Full       : ns(1)) {
   iptype "xilinx_ipif_rdfifo";
   ipparm "core=arm";
   ipparm "depth=8";            // number of  places in fifo
   ipparm "read   = 0x80001000"; 
   ipparm "status = 0x80001004"; // request fifo to gezel
}


ipblock wfifo_ipif (in   IP2WFIFO_RdReq       : ns(1);
                    out  WFIFO2IP_Data        : ns(32);
                    out  WFIFO2IP_RdAck       : ns(1);
                    out  WFIFO2IP_AlmostEmpty : ns(1);
                    out  WFIFO2IP_Empty       : ns(1)) {
   iptype "xilinx_ipif_wrfifo";
   ipparm "core=arm";
   ipparm "depth=8";            // number of places in fifo
   ipparm "write  = 0x80002000"; 
   ipparm "status = 0x80002004"; // request fifo to gezel
}


dp user_logic (  in  Bus2IP_Data          : ns(32); 
                 in  Bus2IP_BE            : ns(4);  
                 in  Bus2IP_RdCE          : ns(2); 
                 in  Bus2IP_WrCE          : ns(2); 
                 out IP2Bus_Data          : ns(32);
                 out IP2Bus_RdAck           : ns(1);
                 out IP2Bus_WrAck           : ns(1);
                 out IP2Bus_Error         : ns(1);
  		 out IP2RFIFO_WrReq       : ns(1);
                 out IP2RFIFO_Data        : ns(32);
                 in  RFIFO2IP_WrAck       : ns(1);
                 in  RFIFO2IP_AlmostFull  : ns(1);
                 in  RFIFO2IP_Full        : ns(1);
                 out IP2WFIFO_RdReq       : ns(1);
                 in  WFIFO2IP_Data        : ns(32);
                 in  WFIFO2IP_RdAck       : ns(1);
                 in  WFIFO2IP_AlmostEmpty : ns(1);
                 in  WFIFO2IP_Empty       : ns(1)) {

  reg ctl,    a       : ns(32);
  reg status, b       : ns(32);
  reg write_a         : ns( 1);
  reg write_b         : ns( 1);
  reg reg_ip2bus_data : ns(32);
  reg reg_ip2bus_ack_r  : ns( 1);
  reg reg_ip2bus_ack_w  : ns( 1);
  sig zero : ns(1);

  always {

    ctl = Bus2IP_WrCE[0] ? Bus2IP_Data : ctl;
    a   = Bus2IP_WrCE[1] ? Bus2IP_Data : a;

    reg_ip2bus_data = Bus2IP_RdCE[0] ? status :
		      Bus2IP_RdCE[1] ? b : 
                      0;
    IP2Bus_Data     = reg_ip2bus_data;
    reg_ip2bus_ack_r  = Bus2IP_RdCE[0] | 
		      Bus2IP_RdCE[1];
    reg_ip2bus_ack_w  = Bus2IP_WrCE[0] | 
		      Bus2IP_WrCE[1];
    IP2Bus_RdAck      = reg_ip2bus_ack_r;
    IP2Bus_WrAck      = reg_ip2bus_ack_w;
    
    zero            = 0;
    status          = WFIFO2IP_AlmostEmpty # 
                      WFIFO2IP_Empty       # 
                      WFIFO2IP_RdAck       #
                      zero                 #
                      RFIFO2IP_AlmostFull  # 
                      RFIFO2IP_Full        # 
                      RFIFO2IP_WrAck;

    // copy reg a into read fifo when ctl[0] bit up-edges
    write_a         = ctl[0];
    IP2RFIFO_WrReq  = ctl[0] & (write_a ^ ctl[0]);
    IP2RFIFO_Data   = a;

    // copy write fifo into reg b when ctl[1] bit up-edges
    write_b         = ctl[1];
    IP2WFIFO_RdReq  = ctl[1] & (write_b ^ ctl[1]);
    b               = (WFIFO2IP_RdAck & ctl[1] & (write_b ^ ctl[1])) ? WFIFO2IP_Data : b;

    IP2Bus_Error = 0;
  }
}

dp top {

   sig Bus2IP_Data          : ns(32); 
   sig Bus2IP_BE            : ns(4);  
   sig Bus2IP_RdCE          : ns(2); 
   sig Bus2IP_WrCE          : ns(2); 
   sig IP2Bus_Data          : ns(32);
   sig IP2Bus_RdAck           : ns(1);
   sig IP2Bus_WrAck           : ns(1);
   sig IP2Bus_Error         : ns(1);
   sig IP2RFIFO_WrReq       : ns(1);
   sig IP2RFIFO_Data        : ns(32);
   sig RFIFO2IP_WrAck       : ns(1);
   sig RFIFO2IP_AlmostFull  : ns(1);
   sig RFIFO2IP_Full        : ns(1);
   sig IP2WFIFO_RdReq       : ns(1);
   sig WFIFO2IP_Data        : ns(32);
   sig WFIFO2IP_RdAck       : ns(1);
   sig WFIFO2IP_AlmostEmpty : ns(1);
   sig WFIFO2IP_Empty       : ns(1);

   use arm;

   use reg_ipif   (Bus2IP_Data    ,  
                   Bus2IP_BE      , 
                   Bus2IP_RdCE    , 
                   Bus2IP_WrCE    , 
                   IP2Bus_Data    , 
                   IP2Bus_RdAck   , 
                   IP2Bus_WrAck   , 
                   IP2Bus_Error   );   

   use rfifo_ipif (IP2RFIFO_WrReq      ,
                   IP2RFIFO_Data       ,
                   RFIFO2IP_WrAck      , 
                   RFIFO2IP_AlmostFull ,
                   RFIFO2IP_Full       );

   use wfifo_ipif (IP2WFIFO_RdReq       ,
                   WFIFO2IP_Data        ,
                   WFIFO2IP_RdAck       ,
                   WFIFO2IP_AlmostEmpty ,
                   WFIFO2IP_Empty       );

   use user_logic (Bus2IP_Data          , 
                   Bus2IP_BE            , 
                   Bus2IP_RdCE          ,
                   Bus2IP_WrCE          ,
                   IP2Bus_Data          ,
                   IP2Bus_RdAck         ,
                   IP2Bus_WrAck         ,
                   IP2Bus_Error         ,
  	       	   IP2RFIFO_WrReq       ,
                   IP2RFIFO_Data        ,
                   RFIFO2IP_WrAck       ,
                   RFIFO2IP_AlmostFull  ,
                   RFIFO2IP_Full        ,
                   IP2WFIFO_RdReq       ,
                   WFIFO2IP_Data        ,
                   WFIFO2IP_RdAck       ,
                   WFIFO2IP_AlmostEmpty ,
                   WFIFO2IP_Empty       );

   always { }
}


system S {
  top;
}
