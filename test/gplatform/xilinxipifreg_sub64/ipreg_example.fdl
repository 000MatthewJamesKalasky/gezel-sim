ipblock arm {
  iptype "armsystem";
  ipparm "exec = ipreg_drive";
}

// interface for 2 write, 2 read chip-enable channels
ipblock regipif(out Bus2IP_Data    : ns(32); 
                out Bus2IP_BE      : ns( 4);  
                out Bus2IP_RdCE    : ns( 2); 
                out Bus2IP_WrCE    : ns( 2); 
                in  IP2Bus_Data    : ns(32);
                in  IP2Bus_RdAck   : ns( 1);
                in  IP2Bus_WrAck   : ns( 1);
                in  IP2Bus_Error   : ns( 1)) {
   iptype "xilinx_ipif_reg";
   ipparm "core=arm";
   ipparm "regid=0x80000000"; // index for regs
   ipparm "opid =0x80000004"; // operation id
   ipparm "data =0x8000000C"; // data r/w channel
}

$option "generic user_logic C_SLV_DWIDTH integer 32"
$option "generic user_logic C_NUM_REG integer 2"

// mul64
dp user_logic(in  Bus2IP_Data    : ns(32); 
              in  Bus2IP_BE      : ns(4);  
              in  Bus2IP_RdCE    : ns(2); 
              in  Bus2IP_WrCE    : ns(2); 
              out IP2Bus_Data    : ns(32);
              out IP2Bus_RdAck   : ns(1);
              out IP2Bus_WrAck   : ns(1);
              out IP2Bus_Error   : ns(1)) {
   reg d1, d2 : tc(32);
   reg o1, o2 : tc(32);

   reg ip2bus_d : ns(32);
   reg ip2bus_wr_a : ns(1);
   reg ip2bus_rd_a : ns(1);

   sig m : tc(64);
   always {

     m = d1 - d2;

     o2 = m[63:32];
     o1 = m[31:0];

     d1 = Bus2IP_WrCE[0] ? Bus2IP_Data : d1;
     d2 = Bus2IP_WrCE[1] ? Bus2IP_Data : d2;

//     $display(Bus2IP_WrCE, " ", Bus2IP_RdCE);

     ip2bus_d    = Bus2IP_RdCE[0] ? o1 :
		   Bus2IP_RdCE[1] ? o2 : 0;
     IP2Bus_Data = ip2bus_d;

     ip2bus_wr_a = Bus2IP_WrCE[0] | 
		   Bus2IP_WrCE[1];
     IP2Bus_WrAck  = ip2bus_wr_a;

     ip2bus_rd_a = Bus2IP_RdCE[0] | 
		   Bus2IP_RdCE[1];
     IP2Bus_RdAck  = ip2bus_rd_a;

     IP2Bus_Error = 0;
   }
}

dp top {
  sig Bus2IP_Data    : ns(32);
  sig Bus2IP_BE      : ns(4); 
  sig Bus2IP_RdCE    : ns(2); 
  sig Bus2IP_WrCE    : ns(2); 
  sig IP2Bus_Data    : ns(32);
  sig IP2Bus_RdAck   : ns(1); 
  sig IP2Bus_WrAck   : ns(1); 
  sig IP2Bus_Error   : ns(1); 

  use arm;

  use regipif(Bus2IP_Data    ,
	      Bus2IP_BE      ,
	      Bus2IP_RdCE    ,
	      Bus2IP_WrCE    ,
	      IP2Bus_Data    ,
	      IP2Bus_RdAck   ,
	      IP2Bus_WrAck   ,
	      IP2Bus_Error   );

  use user_logic(Bus2IP_Data ,
	      Bus2IP_BE      ,
	      Bus2IP_RdCE    ,
	      Bus2IP_WrCE    ,
	      IP2Bus_Data    ,
	      IP2Bus_RdAck   ,
	      IP2Bus_WrAck   ,
	      IP2Bus_Error   );
}

system S {
  top;
}
